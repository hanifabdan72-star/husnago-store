<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HusnaGO - Antar Makanan & Obat</title>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        :root {
            --primary: #FF9800;
            --primary-dark: #F57C00;
            --primary-light: #FFE0B2;
            --secondary: #757575;
            --light: #f5f5f5;
            --dark: #212121;
            --success: #4CAF50;
            --danger: #F44336;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f9f9f9;
            color: var(--dark);
        }
        
        /* Header Styles */
        header {
            background-color: var(--primary);
            color: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .logo h1 {
            font-size: 1.8rem;
            font-weight: 700;
        }
        
        .logo span {
            color: white;
            background-color: var(--primary-dark);
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.9rem;
        }
        
        nav ul {
            display: flex;
            list-style: none;
            gap: 20px;
        }
        
        nav a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            padding: 5px 10px;
            border-radius: 4px;
            transition: background-color 0.3s;
        }
        
        nav a:hover {
            background-color: rgba(255,255,255,0.2);
        }
        
        .cart-icon {
            position: relative;
            cursor: pointer;
        }
        
        .cart-count {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: var(--danger);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
        }
        
        /* Main Content */
        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }
        
        .search-container {
            margin-bottom: 2rem;
        }
        
        .search-box {
            width: 100%;
            padding: 12px 20px;
            border: 1px solid #ddd;
            border-radius: 30px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.3s;
        }
        
        .search-box:focus {
            border-color: var(--primary);
        }
        
        .categories {
            display: flex;
            gap: 10px;
            margin-bottom: 2rem;
            overflow-x: auto;
            padding-bottom: 10px;
        }
        
        .category-btn {
            background-color: white;
            border: 1px solid #ddd;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
            white-space: nowrap;
        }
        
        .category-btn.active, .category-btn:hover {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
        }
        
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 2rem;
        }
        
        .product-card {
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .product-image {
            height: 180px;
            background-color: var(--primary-light);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
            font-weight: bold;
            overflow: hidden;
        }
        
        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .product-info {
            padding: 15px;
        }
        
        .product-title {
            font-weight: 600;
            margin-bottom: 5px;
        }
        
        .product-price {
            color: var(--primary);
            font-weight: 700;
            margin-bottom: 10px;
        }
        
        .add-to-cart {
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            font-weight: 500;
            transition: background-color 0.3s;
        }
        
        .add-to-cart:hover {
            background-color: var(--primary-dark);
        }
        
        /* Cart Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        
        .modal-content {
            background-color: white;
            border-radius: 8px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            padding: 20px;
            position: relative;
        }
        
        .close-modal {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--secondary);
        }
        
        .cart-items {
            margin: 20px 0;
            max-height: 300px;
            overflow-y: auto;
        }
        
        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        
        .cart-item-info {
            flex-grow: 1;
        }
        
        .cart-item-title {
            font-weight: 500;
        }
        
        .cart-item-price {
            color: var(--primary);
            font-weight: 600;
        }
        
        .cart-item-quantity {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .quantity-btn {
            background-color: var(--light);
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }
        
        .remove-item {
            color: var(--danger);
            background: none;
            border: none;
            cursor: pointer;
            margin-left: 10px;
        }
        
        .cart-summary {
            border-top: 1px solid #eee;
            padding-top: 15px;
        }
        
        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .total {
            font-weight: 700;
            font-size: 1.2rem;
            color: var(--primary);
        }
        
        .checkout-btn {
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            font-weight: 500;
            font-size: 1rem;
            margin-top: 15px;
            transition: background-color 0.3s;
        }
        
        .checkout-btn:hover {
            background-color: var(--primary-dark);
        }
        
        /* Checkout Form */
        .checkout-form {
            display: none;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        .form-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        .form-input:focus {
            border-color: var(--primary);
            outline: none;
        }
        
        .back-to-cart {
            background-color: transparent;
            color: var(--primary);
            border: 1px solid var(--primary);
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }
        
        /* Admin Dashboard */
        .admin-dashboard {
            display: none;
        }
        
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary);
            margin: 10px 0;
        }
        
        .stat-label {
            color: var(--secondary);
        }
        
        .sales-table {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        
        th {
            background-color: var(--primary-light);
            font-weight: 600;
        }
        
        /* Tabs */
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid #ddd;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border-bottom: 3px solid transparent;
        }
        
        .tab.active {
            border-bottom-color: var(--primary);
            color: var(--primary);
            font-weight: 600;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Footer */
        footer {
            background-color: var(--dark);
            color: white;
            padding: 2rem;
            margin-top: 3rem;
        }
        
        .footer-container {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 30px;
        }
        
        .footer-section h3 {
            margin-bottom: 15px;
            color: var(--primary);
        }
        
        .footer-section p, .footer-section a {
            color: #ccc;
            margin-bottom: 10px;
            display: block;
            text-decoration: none;
        }
        
        .footer-section a:hover {
            color: white;
        }
        
        .copyright {
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #444;
            color: #999;
        }
        
        /* Admin Product Form */
        .product-form {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .form-row {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .form-col {
            flex: 1;
        }
        
        .image-upload-container {
            border: 2px dashed #ddd;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            margin-bottom: 15px;
            cursor: pointer;
            transition: border-color 0.3s;
        }
        
        .image-upload-container:hover {
            border-color: var(--primary);
        }
        
        .image-upload-container img {
            max-width: 100%;
            max-height: 200px;
            margin-bottom: 10px;
        }
        
        .image-preview {
            display: none;
        }
        
        .btn-group {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        
        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.3s;
        }
        
        .btn-primary {
            background-color: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: var(--primary-dark);
        }
        
        .btn-secondary {
            background-color: var(--secondary);
            color: white;
        }
        
        .btn-secondary:hover {
            background-color: #616161;
        }
        
        .btn-danger {
            background-color: var(--danger);
            color: white;
        }
        
        .btn-danger:hover {
            background-color: #d32f2f;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: var(--secondary);
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 10px;
            }
            
            nav ul {
                gap: 10px;
            }
            
            .products-grid {
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            }
            
            .stats-grid {
                grid-template-columns: 1fr 1fr;
            }
            
            .form-row {
                flex-direction: column;
            }
        }
        
        @media (max-width: 480px) {
            .products-grid {
                grid-template-columns: 1fr 1fr;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="header-container">
            <div class="logo">
                <h1>Husna<span>GO</span></h1>
                <span>Antar Makanan & Obat</span>
            </div>
            <nav>
                <ul>
                    <li><a href="#" class="nav-link active" data-tab="home">Beranda</a></li>
                    <li><a href="#" class="nav-link" data-tab="products">Produk</a></li>
                    <li><a href="#" class="nav-link" data-tab="admin">Admin</a></li>
                </ul>
            </nav>
            <div class="cart-icon" id="cartIcon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M3 3H5L5.4 5M7 13H17L21 5H5.4M7 13L5.4 5M7 13L4.7 15.3C4.3 15.7 4.6 16.3 5.1 16.3H17M17 13V16.3M9 19C9 19.6 8.6 20 8 20C7.4 20 7 19.6 7 19C7 18.4 7.4 18 8 18C8.6 18 9 18.4 9 19ZM17 19C17 19.6 16.6 20 16 20C15.4 20 15 19.6 15 19C15 18.4 15.4 18 16 18C16.6 18 17 18.4 17 19Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <div class="cart-count">0</div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <div class="container">
        <!-- Home Tab -->
        <div class="tab-content active" id="home">
            <div class="search-container">
                <input type="text" class="search-box" placeholder="Cari makanan, obat, atau minuman...">
            </div>
            
            <div class="categories">
                <button class="category-btn active" data-category="all">Semua</button>
                <button class="category-btn" data-category="makanan">Makanan</button>
                <button class="category-btn" data-category="minuman">Minuman</button>
                <button class="category-btn" data-category="obat">Obat</button>
                <button class="category-btn" data-category="vitamin">Vitamin</button>
            </div>
            
            <div class="products-grid" id="productsGrid">
                <div class="loading">Memuat produk...</div>
            </div>
        </div>
        
        <!-- Products Tab -->
        <div class="tab-content" id="products">
            <h2 style="margin-bottom: 20px;">Semua Produk</h2>
            <div class="products-grid" id="allProductsGrid">
                <div class="loading">Memuat produk...</div>
            </div>
        </div>
        
        <!-- Admin Dashboard -->
        <div class="tab-content admin-dashboard" id="admin">
            <div class="dashboard-header">
                <h2>Dashboard Admin</h2>
                <button id="refreshData" class="add-to-cart">Refresh Data</button>
            </div>
            
            <div class="tabs">
                <div class="tab active" data-tab="overview">Ringkasan</div>
                <div class="tab" data-tab="transactions">Transaksi</div>
                <div class="tab" data-tab="products-admin">Kelola Produk</div>
            </div>
            
            <div class="tab-content active" id="overview">
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-label">Total Pendapatan</div>
                        <div class="stat-value" id="totalRevenue">Rp 0</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Total Pesanan</div>
                        <div class="stat-value" id="totalOrders">0</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Produk Terjual</div>
                        <div class="stat-value" id="productsSold">0</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Pelanggan</div>
                        <div class="stat-value" id="totalCustomers">0</div>
                    </div>
                </div>
                
                <h3 style="margin-bottom: 15px;">Transaksi Terbaru</h3>
                <div class="sales-table">
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nama</th>
                                <th>Tanggal</th>
                                <th>Total</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="recentTransactions">
                            <tr><td colspan="5" class="loading">Memuat transaksi...</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="tab-content" id="transactions">
                <h3 style="margin-bottom: 15px;">Semua Transaksi</h3>
                <div class="sales-table">
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nama</th>
                                <th>No. WhatsApp</th>
                                <th>Produk</th>
                                <th>Total</th>
                                <th>Tanggal</th>
                            </tr>
                        </thead>
                        <tbody id="allTransactions">
                            <tr><td colspan="6" class="loading">Memuat transaksi...</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="tab-content" id="products-admin">
                <h3 style="margin-bottom: 15px;" id="productFormTitle">Tambah Produk Baru</h3>
                
                <!-- Product Form -->
                <div class="product-form">
                    <form id="productForm">
                        <input type="hidden" id="productId">
                        
                        <div class="form-row">
                            <div class="form-col">
                                <div class="form-group">
                                    <label class="form-label" for="productName">Nama Produk:</label>
                                    <input type="text" class="form-input" id="productName" required>
                                </div>
                            </div>
                            <div class="form-col">
                                <div class="form-group">
                                    <label class="form-label" for="productCategory">Kategori:</label>
                                    <select class="form-input" id="productCategory" required>
                                        <option value="">Pilih Kategori</option>
                                        <option value="makanan">Makanan</option>
                                        <option value="minuman">Minuman</option>
                                        <option value="obat">Obat</option>
                                        <option value="vitamin">Vitamin</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-col">
                                <div class="form-group">
                                    <label class="form-label" for="productPrice">Harga:</label>
                                    <input type="number" class="form-input" id="productPrice" min="0" required>
                                </div>
                            </div>
                            <div class="form-col">
                                <div class="form-group">
                                    <label class="form-label" for="productStock">Stok:</label>
                                    <input type="number" class="form-input" id="productStock" min="0" required>
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">Gambar Produk:</label>
                            <div class="image-upload-container" id="imageUploadContainer">
                                <div id="uploadPlaceholder">
                                    <p>Klik untuk mengunggah gambar</p>
                                    <p><small>Format: JPG, PNG, GIF (Maks. 2MB)</small></p>
                                </div>
                                <img id="imagePreview" class="image-preview" src="" alt="Preview">
                                <input type="file" id="productImage" accept="image/*" style="display: none;">
                            </div>
                        </div>
                        
                        <div class="btn-group">
                            <button type="submit" class="btn btn-primary" id="saveProductBtn">Simpan Produk</button>
                            <button type="button" class="btn btn-secondary" id="cancelEditBtn" style="display: none;">Batal Edit</button>
                            <button type="button" class="btn btn-danger" id="clearFormBtn">Bersihkan Form</button>
                        </div>
                    </form>
                </div>
                
                <h3 style="margin-bottom: 15px;">Daftar Produk</h3>
                <div class="sales-table">
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Gambar</th>
                                <th>Nama</th>
                                <th>Kategori</th>
                                <th>Harga</th>
                                <th>Stok</th>
                                <th>Aksi</th>
                            </tr>
                        </thead>
                        <tbody id="productsTable">
                            <tr><td colspan="7" class="loading">Memuat produk...</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Cart Modal -->
    <div class="modal" id="cartModal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2>Keranjang Belanja</h2>
            
            <div class="cart-items" id="cartItems">
                <!-- Cart items will be loaded here -->
            </div>
            
            <div class="cart-summary">
                <div class="summary-row">
                    <span>Subtotal:</span>
                    <span id="subtotal">Rp 0</span>
                </div>
                <div class="summary-row">
                    <span>Ongkos Kirim:</span>
                    <span>Rp 2.000</span>
                </div>
                <div class="summary-row total">
                    <span>Total:</span>
                    <span id="total">Rp 2.000</span>
                </div>
                
                <button class="checkout-btn" id="checkoutBtn">Checkout</button>
            </div>
        </div>
    </div>

    <!-- Checkout Form -->
    <div class="modal" id="checkoutModal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2>Checkout</h2>
            
            <div class="checkout-form" id="checkoutForm">
                <div class="form-group">
                    <label class="form-label" for="customerName">Nama:</label>
                    <input type="text" class="form-input" id="customerName" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="customerWhatsApp">No. WhatsApp:</label>
                    <input type="text" class="form-input" id="customerWhatsApp" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="customerNote">Catatan Tambahan:</label>
                    <textarea class="form-input" id="customerNote" rows="3"></textarea>
                </div>
                
                <div class="cart-summary">
                    <div class="summary-row">
                        <span>Subtotal:</span>
                        <span id="checkoutSubtotal">Rp 0</span>
                    </div>
                    <div class="summary-row">
                        <span>Ongkos Kirim:</span>
                        <span>Rp 2.000</span>
                    </div>
                    <div class="summary-row total">
                        <span>Total:</span>
                        <span id="checkoutTotal">Rp 2.000</span>
                    </div>
                </div>
                
                <div style="display: flex; margin-top: 20px;">
                    <button class="back-to-cart" id="backToCart">Kembali ke Keranjang</button>
                    <button class="checkout-btn" id="confirmOrder">Konfirmasi Pesanan</button>
                </div>
            </div>
            
            <div id="orderSuccess" style="display: none; text-align: center; padding: 20px;">
                <h3 style="color: var(--success); margin-bottom: 15px;">Pesanan Berhasil!</h3>
                <p>Terima kasih telah berbelanja di HusnaGO.</p>
                <p>Kami akan menghubungi Anda via WhatsApp untuk konfirmasi pesanan.</p>
                <button class="checkout-btn" id="newOrder" style="margin-top: 20px;">Pesan Lagi</button>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer>
        <div class="footer-container">
            <div class="footer-section">
                <h3>HusnaGO</h3>
                <p>Layanan antar makanan dan obat terpercaya dengan pengiriman cepat dan harga terjangkau.</p>
            </div>
            
            <div class="footer-section">
                <h3>Kontak</h3>
                <p>Email: info@husnago.com</p>
                <p>Telepon: (021) 1234-5678</p>
                <p>WhatsApp: 0812-3456-7890</p>
            </div>
            
            <div class="footer-section">
                <h3>Layanan</h3>
                <a href="#">Makanan</a>
                <a href="#">Minuman</a>
                <a href="#">Obat</a>
                <a href="#">Vitamin</a>
            </div>
            
            <div class="footer-section">
                <h3>Informasi</h3>
                <a href="#">Tentang Kami</a>
                <a href="#">Syarat & Ketentuan</a>
                <a href="#">Kebijakan Privasi</a>
                <a href="#">Bantuan</a>
            </div>
        </div>
        
        <div class="copyright">
            &copy; 2023 HusnaGO. All rights reserved.
        </div>
    </footer>

    <script>
        // Supabase Configuration - GANTI DENGAN KONFIGURASI ANDA
        const SUPABASE_URL = 'https://bbklsjhhjancbmjvhfak.supabase.co'; // Ganti dengan URL Supabase Anda
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJia2xzamhoamFuY2JtanZoZmFrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk2MjM0NTYsImV4cCI6MjA3NTE5OTQ1Nn0.L28g0z64QaB9q1Gu0uqmIWyM81rV5V8UjlFp2LE7u3k'; // Ganti dengan anon key Anda
        
        // Inisialisasi Supabase
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        
        // Data sementara untuk cart (masih menggunakan localStorage)
        let cart = JSON.parse(localStorage.getItem('husnagoCart')) || [];
        let products = [];
        
        // DOM Elements
        const productsGrid = document.getElementById('productsGrid');
        const allProductsGrid = document.getElementById('allProductsGrid');
        const cartIcon = document.getElementById('cartIcon');
        const cartModal = document.getElementById('cartModal');
        const checkoutModal = document.getElementById('checkoutModal');
        const cartItems = document.getElementById('cartItems');
        const cartCount = document.querySelector('.cart-count');
        const subtotalEl = document.getElementById('subtotal');
        const totalEl = document.getElementById('total');
        const checkoutSubtotal = document.getElementById('checkoutSubtotal');
        const checkoutTotal = document.getElementById('checkoutTotal');
        const checkoutBtn = document.getElementById('checkoutBtn');
        const backToCart = document.getElementById('backToCart');
        const confirmOrder = document.getElementById('confirmOrder');
        const customerName = document.getElementById('customerName');
        const customerWhatsApp = document.getElementById('customerWhatsApp');
        const customerNote = document.getElementById('customerNote');
        const orderSuccess = document.getElementById('orderSuccess');
        const checkoutForm = document.getElementById('checkoutForm');
        const newOrderBtn = document.getElementById('newOrder');
        const closeModals = document.querySelectorAll('.close-modal');
        const categoryBtns = document.querySelectorAll('.category-btn');
        const searchBox = document.querySelector('.search-box');
        const navLinks = document.querySelectorAll('.nav-link');
        const tabContents = document.querySelectorAll('.tab-content');
        const adminTabs = document.querySelectorAll('.admin-dashboard .tab');
        const adminTabContents = document.querySelectorAll('.admin-dashboard .tab-content');
        const refreshDataBtn = document.getElementById('refreshData');
        const totalRevenue = document.getElementById('totalRevenue');
        const totalOrders = document.getElementById('totalOrders');
        const productsSold = document.getElementById('productsSold');
        const totalCustomers = document.getElementById('totalCustomers');
        const recentTransactions = document.getElementById('recentTransactions');
        const allTransactions = document.getElementById('allTransactions');
        const productsTable = document.getElementById('productsTable');
        
        // Product form elements
        const productForm = document.getElementById('productForm');
        const productId = document.getElementById('productId');
        const productName = document.getElementById('productName');
        const productCategory = document.getElementById('productCategory');
        const productPrice = document.getElementById('productPrice');
        const productStock = document.getElementById('productStock');
        const productImage = document.getElementById('productImage');
        const imageUploadContainer = document.getElementById('imageUploadContainer');
        const uploadPlaceholder = document.getElementById('uploadPlaceholder');
        const imagePreview = document.getElementById('imagePreview');
        const saveProductBtn = document.getElementById('saveProductBtn');
        const cancelEditBtn = document.getElementById('cancelEditBtn');
        const clearFormBtn = document.getElementById('clearFormBtn');
        const productFormTitle = document.getElementById('productFormTitle');

        // ==================== SUPABASE FUNCTIONS ====================

        // Get all products from Supabase
        async function getProducts() {
            try {
                const { data, error } = await supabase
                    .from('products')
                    .select('*')
                    .order('created_at', { ascending: false });
                
                if (error) throw error;
                return data || [];
            } catch (error) {
                console.error('Error getting products:', error);
                return [];
            }
        }

        // Add or update product in Supabase
        async function saveProduct(productData) {
            try {
                // Convert image to base64 if exists
                if (productData.imageFile) {
                    productData.image_data = await fileToBase64(productData.imageFile);
                    delete productData.imageFile;
                }
                
                if (productData.id) {
                    // Update existing product
                    const { data, error } = await supabase
                        .from('products')
                        .update(productData)
                        .eq('id', productData.id)
                        .select();
                    
                    if (error) throw error;
                    return data[0];
                } else {
                    // Add new product
                    const { data, error } = await supabase
                        .from('products')
                        .insert([productData])
                        .select();
                    
                    if (error) throw error;
                    return data[0];
                }
            } catch (error) {
                console.error('Error saving product:', error);
                throw error;
            }
        }

        // Delete product from Supabase
        async function deleteProduct(id) {
            try {
                const { error } = await supabase
                    .from('products')
                    .delete()
                    .eq('id', id);
                
                if (error) throw error;
                return true;
            } catch (error) {
                console.error('Error deleting product:', error);
                throw error;
            }
        }

        // Get all transactions from Supabase
        async function getTransactions() {
            try {
                const { data, error } = await supabase
                    .from('transactions')
                    .select(`
                        *,
                        order_items (
                            *,
                            products (
                                name
                            )
                        )
                    `)
                    .order('created_at', { ascending: false });
                
                if (error) throw error;
                return data || [];
            } catch (error) {
                console.error('Error getting transactions:', error);
                return [];
            }
        }

        // Save transaction to Supabase
        async function saveTransaction(transactionData) {
            try {
                const { data, error } = await supabase
                    .from('transactions')
                    .insert([transactionData])
                    .select();
                
                if (error) throw error;
                return data[0];
            } catch (error) {
                console.error('Error saving transaction:', error);
                throw error;
            }
        }

        // Save order items to Supabase
        async function saveOrderItems(orderItems) {
            try {
                const { data, error } = await supabase
                    .from('order_items')
                    .insert(orderItems)
                    .select();
                
                if (error) throw error;
                return data;
            } catch (error) {
                console.error('Error saving order items:', error);
                throw error;
            }
        }

        // Update product stock in Supabase
        async function updateProductStock(productId, newStock) {
            try {
                const { error } = await supabase
                    .from('products')
                    .update({ stock: newStock })
                    .eq('id', productId);
                
                if (error) throw error;
                return true;
            } catch (error) {
                console.error('Error updating product stock:', error);
                throw error;
            }
        }

        // Convert file to base64
        function fileToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result);
                reader.onerror = error => reject(error);
            });
        }

        // ==================== APPLICATION FUNCTIONS ====================

        // Display products
        function displayProducts(productsArray, container) {
            container.innerHTML = '';
            
            if (productsArray.length === 0) {
                container.innerHTML = '<div class="loading">Tidak ada produk</div>';
                return;
            }
            
            productsArray.forEach(product => {
                const productCard = document.createElement('div');
                productCard.className = 'product-card';
                
                // Check if product has image_data or uses default emoji
                const imageContent = product.image_data 
                    ? `<img src="${product.image_data}" alt="${product.name}">` 
                    : `<div style="font-size: 60px;">${getCategoryEmoji(product.category)}</div>`;
                
                productCard.innerHTML = `
                    <div class="product-image">
                        ${imageContent}
                    </div>
                    <div class="product-info">
                        <div class="product-title">${product.name}</div>
                        <div class="product-price">Rp ${product.price.toLocaleString('id-ID')}</div>
                        <button class="add-to-cart" data-id="${product.id}" ${product.stock === 0 ? 'disabled' : ''}>
                            ${product.stock === 0 ? 'Stok Habis' : 'Tambah ke Keranjang'}
                        </button>
                    </div>
                `;
                container.appendChild(productCard);
            });
            
            // Add event listeners to add to cart buttons
            const addToCartBtns = container.querySelectorAll('.add-to-cart');
            addToCartBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const productId = parseInt(this.getAttribute('data-id'));
                    addToCart(productId);
                });
            });
        }

        // Get emoji for category
        function getCategoryEmoji(category) {
            const emojis = {
                'makanan': '🍽️',
                'minuman': '🥤',
                'obat': '💊',
                'vitamin': '🧴'
            };
            return emojis[category] || '📦';
        }

        // Add to cart function
        function addToCart(productId) {
            const product = products.find(p => p.id === productId);
            if (!product) return;
            
            // Check stock
            if (product.stock === 0) {
                alert('Maaf, stok produk ini habis!');
                return;
            }
            
            const existingItem = cart.find(item => item.id === productId);
            
            if (existingItem) {
                // Check if we're exceeding available stock
                if (existingItem.quantity >= product.stock) {
                    alert(`Maaf, stok ${product.name} hanya tersedia ${product.stock} item!`);
                    return;
                }
                existingItem.quantity += 1;
            } else {
                cart.push({
                    id: product.id,
                    name: product.name,
                    price: product.price,
                    quantity: 1
                });
            }
            
            updateCart();
            saveCartToStorage();
            
            // Show notification
            alert(`${product.name} telah ditambahkan ke keranjang!`);
        }

        // Update cart display
        function updateCart() {
            cartItems.innerHTML = '';
            let subtotal = 0;
            
            if (cart.length === 0) {
                cartItems.innerHTML = '<p style="text-align: center; padding: 20px;">Keranjang belanja kosong</p>';
            } else {
                cart.forEach(item => {
                    const itemTotal = item.price * item.quantity;
                    subtotal += itemTotal;
                    
                    const cartItem = document.createElement('div');
                    cartItem.className = 'cart-item';
                    cartItem.innerHTML = `
                        <div class="cart-item-info">
                            <div class="cart-item-title">${item.name}</div>
                            <div class="cart-item-price">Rp ${item.price.toLocaleString('id-ID')} x ${item.quantity}</div>
                        </div>
                        <div class="cart-item-quantity">
                            <button class="quantity-btn decrease" data-id="${item.id}">-</button>
                            <span>${item.quantity}</span>
                            <button class="quantity-btn increase" data-id="${item.id}">+</button>
                            <button class="remove-item" data-id="${item.id}">Hapus</button>
                        </div>
                    `;
                    cartItems.appendChild(cartItem);
                });
            }
            
            // Update cart count
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            cartCount.textContent = totalItems;
            
            // Update subtotal and total
            subtotalEl.textContent = `Rp ${subtotal.toLocaleString('id-ID')}`;
            totalEl.textContent = `Rp ${(subtotal + 2000).toLocaleString('id-ID')}`;
            
            checkoutSubtotal.textContent = `Rp ${subtotal.toLocaleString('id-ID')}`;
            checkoutTotal.textContent = `Rp ${(subtotal + 2000).toLocaleString('id-ID')}`;
        }

        // Save cart to localStorage
        function saveCartToStorage() {
            localStorage.setItem('husnagoCart', JSON.stringify(cart));
        }

        // Reset product form
        function resetProductForm() {
            productId.value = '';
            productName.value = '';
            productCategory.value = '';
            productPrice.value = '';
            productStock.value = '';
            productImage.value = '';
            imagePreview.src = '';
            imagePreview.style.display = 'none';
            uploadPlaceholder.style.display = 'block';
            
            saveProductBtn.textContent = 'Simpan Produk';
            productFormTitle.textContent = 'Tambah Produk Baru';
            cancelEditBtn.style.display = 'none';
        }

        // Edit product
        function editProduct(id) {
            const product = products.find(p => p.id === id);
            if (!product) return;
            
            productId.value = product.id;
            productName.value = product.name;
            productCategory.value = product.category;
            productPrice.value = product.price;
            productStock.value = product.stock;
            
            if (product.image_data) {
                imagePreview.src = product.image_data;
                imagePreview.style.display = 'block';
                uploadPlaceholder.style.display = 'none';
            } else {
                imagePreview.style.display = 'none';
                uploadPlaceholder.style.display = 'block';
            }
            
            saveProductBtn.textContent = 'Update Produk';
            productFormTitle.textContent = 'Edit Produk';
            cancelEditBtn.style.display = 'inline-block';
            
            // Scroll to form
            document.getElementById('products-admin').scrollIntoView({ behavior: 'smooth' });
        }

        // Delete product
        async function deleteProductHandler(id) {
            if (confirm('Apakah Anda yakin ingin menghapus produk ini?')) {
                try {
                    await deleteProduct(id);
                    await loadProducts();
                    alert('Produk berhasil dihapus!');
                } catch (error) {
                    alert('Error menghapus produk: ' + error.message);
                }
            }
        }

        // Update admin dashboard
        async function updateAdminDashboard() {
            try {
                const transactions = await getTransactions();
                
                // Calculate stats
                const totalRevenueValue = transactions.reduce((sum, transaction) => sum + transaction.total, 0);
                const totalOrdersValue = transactions.length;
                const productsSoldValue = transactions.reduce((sum, transaction) => 
                    sum + transaction.order_items.reduce((itemSum, item) => itemSum + item.quantity, 0), 0);
                const totalCustomersValue = new Set(transactions.map(t => t.customer_whatsapp)).size;
                
                // Update stats
                totalRevenue.textContent = `Rp ${totalRevenueValue.toLocaleString('id-ID')}`;
                totalOrders.textContent = totalOrdersValue;
                productsSold.textContent = productsSoldValue;
                totalCustomers.textContent = totalCustomersValue;
                
                // Update recent transactions
                recentTransactions.innerHTML = '';
                const recent = transactions.slice(0, 5);
                
                if (recent.length === 0) {
                    recentTransactions.innerHTML = '<tr><td colspan="5" style="text-align: center;">Belum ada transaksi</td></tr>';
                } else {
                    recent.forEach(transaction => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>#${transaction.id}</td>
                            <td>${transaction.customer_name}</td>
                            <td>${new Date(transaction.created_at).toLocaleDateString('id-ID')}</td>
                            <td>Rp ${transaction.total.toLocaleString('id-ID')}</td>
                            <td><span style="color: var(--success);">${transaction.status}</span></td>
                        `;
                        recentTransactions.appendChild(row);
                    });
                }
                
                // Update all transactions
                allTransactions.innerHTML = '';
                
                if (transactions.length === 0) {
                    allTransactions.innerHTML = '<tr><td colspan="6" style="text-align: center;">Belum ada transaksi</td></tr>';
                } else {
                    transactions.forEach(transaction => {
                        const row = document.createElement('tr');
                        const productsList = transaction.order_items.map(item => 
                            `${item.products.name} (${item.quantity})`
                        ).join(', ');
                        
                        row.innerHTML = `
                            <td>#${transaction.id}</td>
                            <td>${transaction.customer_name}</td>
                            <td>${transaction.customer_whatsapp}</td>
                            <td>${productsList}</td>
                            <td>Rp ${transaction.total.toLocaleString('id-ID')}</td>
                            <td>${new Date(transaction.created_at).toLocaleDateString('id-ID')}</td>
                        `;
                        allTransactions.appendChild(row);
                    });
                }
                
            } catch (error) {
                console.error('Error updating dashboard:', error);
            }
        }

        // Update products table in admin dashboard
        function updateProductsTable() {
            productsTable.innerHTML = '';
            
            if (products.length === 0) {
                productsTable.innerHTML = '<tr><td colspan="7" style="text-align: center;">Belum ada produk</td></tr>';
                return;
            }
            
            products.forEach(product => {
                const row = document.createElement('tr');
                
                // Check if product has image_data or uses default emoji
                const imageContent = product.image_data 
                    ? `<img src="${product.image_data}" alt="${product.name}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;">` 
                    : `<div style="font-size: 30px;">${getCategoryEmoji(product.category)}</div>`;
                
                row.innerHTML = `
                    <td>${product.id}</td>
                    <td>${imageContent}</td>
                    <td>${product.name}</td>
                    <td>${product.category}</td>
                    <td>Rp ${product.price.toLocaleString('id-ID')}</td>
                    <td>${product.stock}</td>
                    <td>
                        <button class="btn btn-primary" onclick="editProduct(${product.id})" style="padding: 5px 10px; font-size: 0.8rem;">Edit</button>
                        <button class="btn btn-danger" onclick="deleteProductHandler(${product.id})" style="padding: 5px 10px; font-size: 0.8rem;">Hapus</button>
                    </td>
                `;
                productsTable.appendChild(row);
            });
        }

        // Load products from Supabase
        async function loadProducts() {
            try {
                products = await getProducts();
                displayProducts(products, productsGrid);
                displayProducts(products, allProductsGrid);
                updateProductsTable();
            } catch (error) {
                console.error('Error loading products:', error);
            }
        }

        // Initialize the app
        async function init() {
            // Load products from Supabase
            await loadProducts();
            
            // Update cart
            updateCart();
            
            // Event listeners for cart icon
            cartIcon.addEventListener('click', () => {
                cartModal.style.display = 'flex';
            });
            
            // Event listeners for close modals
            closeModals.forEach(closeBtn => {
                closeBtn.addEventListener('click', () => {
                    cartModal.style.display = 'none';
                    checkoutModal.style.display = 'none';
                });
            });
            
            // Event listeners for cart actions
            document.addEventListener('click', function(e) {
                // Decrease quantity
                if (e.target.classList.contains('decrease')) {
                    const productId = parseInt(e.target.getAttribute('data-id'));
                    const item = cart.find(item => item.id === productId);
                    
                    if (item.quantity > 1) {
                        item.quantity -= 1;
                    } else {
                        cart = cart.filter(item => item.id !== productId);
                    }
                    
                    updateCart();
                    saveCartToStorage();
                }
                
                // Increase quantity
                if (e.target.classList.contains('increase')) {
                    const productId = parseInt(e.target.getAttribute('data-id'));
                    const item = cart.find(item => item.id === productId);
                    const product = products.find(p => p.id === productId);
                    
                    // Check stock before increasing
                    if (item.quantity >= product.stock) {
                        alert(`Maaf, stok ${product.name} hanya tersedia ${product.stock} item!`);
                        return;
                    }
                    
                    item.quantity += 1;
                    
                    updateCart();
                    saveCartToStorage();
                }
                
                // Remove item
                if (e.target.classList.contains('remove-item')) {
                    const productId = parseInt(e.target.getAttribute('data-id'));
                    cart = cart.filter(item => item.id !== productId);
                    
                    updateCart();
                    saveCartToStorage();
                }
            });
            
            // Checkout button
            checkoutBtn.addEventListener('click', () => {
                if (cart.length === 0) {
                    alert('Keranjang belanja kosong!');
                    return;
                }
                
                cartModal.style.display = 'none';
                checkoutModal.style.display = 'flex';
                checkoutForm.style.display = 'block';
                orderSuccess.style.display = 'none';
            });
            
            // Back to cart button
            backToCart.addEventListener('click', () => {
                checkoutModal.style.display = 'none';
                cartModal.style.display = 'flex';
            });
            
            // Confirm order button
            confirmOrder.addEventListener('click', async () => {
                if (!customerName.value || !customerWhatsApp.value) {
                    alert('Harap isi nama dan nomor WhatsApp!');
                    return;
                }
                
                try {
                    // Calculate totals
                    const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                    const total = subtotal + 2000;
                    
                    // Create transaction
                    const transactionData = {
                        customer_name: customerName.value,
                        customer_whatsapp: customerWhatsApp.value,
                        customer_note: customerNote.value,
                        subtotal: subtotal,
                        shipping: 2000,
                        total: total,
                        status: 'pending'
                    };
                    
                    // Save transaction to Supabase
                    const transaction = await saveTransaction(transactionData);
                    
                    // Create order items
                    const orderItems = cart.map(item => ({
                        transaction_id: transaction.id,
                        product_id: item.id,
                        quantity: item.quantity,
                        price: item.price
                    }));
                    
                    // Save order items to Supabase
                    await saveOrderItems(orderItems);
                    
                    // Update product stock in Supabase
                    for (const item of cart) {
                        const product = products.find(p => p.id === item.id);
                        if (product) {
                            const newStock = product.stock - item.quantity;
                            await updateProductStock(product.id, newStock);
                        }
                    }
                    
                    // Reload products to get updated stock
                    await loadProducts();
                    
                    // Clear cart
                    cart = [];
                    updateCart();
                    saveCartToStorage();
                    
                    // Show success message
                    checkoutForm.style.display = 'none';
                    orderSuccess.style.display = 'block';
                    
                    // Update admin dashboard
                    await updateAdminDashboard();
                    
                } catch (error) {
                    alert('Error saat checkout: ' + error.message);
                    console.error('Checkout error:', error);
                }
            });
            
            // New order button
            newOrderBtn.addEventListener('click', () => {
                checkoutModal.style.display = 'none';
                customerName.value = '';
                customerWhatsApp.value = '';
                customerNote.value = '';
            });
            
            // Category filter
            categoryBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    // Remove active class from all buttons
                    categoryBtns.forEach(b => b.classList.remove('active'));
                    
                    // Add active class to clicked button
                    this.classList.add('active');
                    
                    const category = this.getAttribute('data-category');
                    
                    if (category === 'all') {
                        displayProducts(products, productsGrid);
                    } else {
                        const filteredProducts = products.filter(product => product.category === category);
                        displayProducts(filteredProducts, productsGrid);
                    }
                });
            });
            
            // Search functionality
            searchBox.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const filteredProducts = products.filter(product => 
                    product.name.toLowerCase().includes(searchTerm)
                );
                displayProducts(filteredProducts, productsGrid);
            });
            
            // Navigation tabs
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Remove active class from all links and tabs
                    navLinks.forEach(l => l.classList.remove('active'));
                    tabContents.forEach(tab => tab.classList.remove('active'));
                    
                    // Add active class to clicked link
                    this.classList.add('active');
                    
                    // Show corresponding tab
                    const tabId = this.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                    
                    // If admin tab is clicked, update the dashboard
                    if (tabId === 'admin') {
                        updateAdminDashboard();
                    }
                });
            });
            
            // Admin dashboard tabs
            adminTabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    // Remove active class from all tabs
                    adminTabs.forEach(t => t.classList.remove('active'));
                    adminTabContents.forEach(content => content.classList.remove('active'));
                    
                    // Add active class to clicked tab
                    this.classList.add('active');
                    
                    // Show corresponding content
                    const tabId = this.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                });
            });
            
            // Refresh data button
            refreshDataBtn.addEventListener('click', async () => {
                await loadProducts();
                await updateAdminDashboard();
                alert('Data berhasil di-refresh!');
            });
            
            // Image upload functionality
            imageUploadContainer.addEventListener('click', () => {
                productImage.click();
            });
            
            productImage.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    // Check file size (max 2MB)
                    if (file.size > 2 * 1024 * 1024) {
                        alert('Ukuran file terlalu besar. Maksimal 2MB.');
                        return;
                    }
                    
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        imagePreview.src = e.target.result;
                        imagePreview.style.display = 'block';
                        uploadPlaceholder.style.display = 'none';
                    };
                    reader.readAsDataURL(file);
                }
            });
            
            // Product form submission
            productForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const id = productId.value ? parseInt(productId.value) : null;
                const name = productName.value;
                const category = productCategory.value;
                const price = parseInt(productPrice.value);
                const stock = parseInt(productStock.value);
                const imageFile = productImage.files[0] || null;
                
                if (!name || !category || !price || !stock) {
                    alert('Harap isi semua field!');
                    return;
                }
                
                try {
                    const productData = {
                        name,
                        category,
                        price,
                        stock
                    };
                    
                    if (id) {
                        productData.id = id;
                    }
                    
                    if (imageFile) {
                        productData.imageFile = imageFile;
                    }
                    
                    await saveProduct(productData);
                    
                    // Reload products
                    await loadProducts();
                    
                    // Reset form
                    resetProductForm();
                    
                    alert(id ? 'Produk berhasil diperbarui!' : 'Produk berhasil ditambahkan!');
                } catch (error) {
                    alert('Error menyimpan produk: ' + error.message);
                    console.error('Save product error:', error);
                }
            });
            
            // Cancel edit button
            cancelEditBtn.addEventListener('click', resetProductForm);
            
            // Clear form button
            clearFormBtn.addEventListener('click', resetProductForm);
            
            // Initialize admin dashboard
            await updateAdminDashboard();
        }

        // Initialize the application
        init();
    </script>
</body>
</html>